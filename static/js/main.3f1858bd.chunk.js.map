{"version":3,"sources":["sortingAlgorithms/Merge-Sort.js","sortingAlgorithms/Heap-Sort.js","sortingAlgorithms/Bubble-Sort.js","SortingVisualizer/SortingVisualizer.js","sortingAlgorithms/Quick-Sort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getHeapSortAnimations","arr","n","heapify","swap","heapsort","largest","left","right","children","items","firstIndex","secondIndex","temp","getBubbleSortAnimations","sorted","round","bubbleSort","SortingVisualizer","useState","setArray","NUMBER_OF_ARRAY_BARS","ANIMATION_SPEED_MS","running","PRIMARY_COLOR","SECONDARY_COLOR","resetArray","min","max","random","useEffect","className","onClick","arrayBars","document","getElementsByClassName","setTimeout","barOneIdx","newHeight","style","height","mergeSort","quickSortAlgo","index","pivot","partition","quicksort","getQuickSortAnimations","barTwoIdx","newHeight1","newHeight2","barOneStyle","barTwoStyle","backgroundColor","quickSort","heapSort","map","value","idx","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f1858bd.chunk.js","sourcesContent":["export default function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    // animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    // animations.push([i, j]);\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    // animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    // animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    // animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    // animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","export default function getHeapSortAnimations(arr) {\r\n  const animations = [];\r\n  if (arr.length <= 1) return arr;\r\n  heapsort(arr, animations);\r\n  return animations;\r\n}\r\n\r\nfunction heapsort(arr, animations) {\r\n  let n = arr.length;\r\n\r\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n    heapify(arr, n, i, animations);\r\n  }\r\n\r\n  for (let i = n - 1; i > 0; i--) {\r\n    swap(arr, 0, i);\r\n    animations.push([0, i]);\r\n    heapify(arr, i, 0, animations);\r\n  }\r\n}\r\n\r\nconst heapify = (arr, n, i, animations) => {\r\n  let largest = i;\r\n  let left = 2 * i + 1;\r\n  let right = 2 * i + 2;\r\n  let children = [];\r\n\r\n  if (left < n && arr[left] > arr[largest]) {\r\n    largest = left;\r\n  }\r\n\r\n  if (right < n && arr[right] > arr[largest]) {\r\n    largest = right;\r\n  }\r\n\r\n  if (left < n) {\r\n    children.push(left);\r\n  }\r\n  if (right < n) {\r\n    children.push(right);\r\n  }\r\n\r\n  if (largest !== i) {\r\n    swap(arr, i, largest);\r\n    animations.push([i, largest]);\r\n    heapify(arr, n, largest, animations);\r\n  }\r\n};\r\n\r\nfunction swap(items, firstIndex, secondIndex) {\r\n  var temp = items[firstIndex];\r\n  items[firstIndex] = items[secondIndex];\r\n  items[secondIndex] = temp;\r\n}\r\n","export default function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  bubbleSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction swap(items, firstIndex, secondIndex) {\r\n  var temp = items[firstIndex];\r\n  items[firstIndex] = items[secondIndex];\r\n  items[secondIndex] = temp;\r\n}\r\n\r\nfunction bubbleSort(array, animations) {\r\n  let sorted = false;\r\n  let round = 0;\r\n\r\n  while (!sorted) {\r\n    sorted = true;\r\n    for (let i = 0; i < array.length - 1 - round; i++) {\r\n      if (array[i] > array[i + 1]) {\r\n        swap(array, i, i + 1);\r\n        animations.push([i, i + 1]);\r\n        sorted = false;\r\n      }\r\n    }\r\n    round++;\r\n  }\r\n  return array;\r\n}\r\n","import React, {Component, useState, useEffect} from 'react';\nimport {RangeStepInput} from 'react-range-step-input';\nimport getMergeSortAnimations from '../sortingAlgorithms/Merge-Sort.js';\nimport getQuickSortAnimations from '../sortingAlgorithms/Quick-Sort';\nimport getHeapSortAnimations from '../sortingAlgorithms/Heap-Sort';\nimport getBubbleSortAnimations from '../sortingAlgorithms/Bubble-Sort';\nimport './SortingVisualizer.css';\n\nfunction SortingVisualizer() {\n  const [array, setArray] = useState([]);\n  const [NUMBER_OF_ARRAY_BARS, setBars] = useState(100);\n  const [ANIMATION_SPEED_MS, setSpeed] = useState(30);\n  const [running, setRunning] = useState(false);\n\n  const PRIMARY_COLOR = 'turquoise';\n  const SECONDARY_COLOR = 'red';\n\n  useEffect(() => resetArray(), []);\n\n  function resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 400));\n    }\n    setArray(array);\n  }\n\n  function mergeSort() {\n    const animations = getMergeSortAnimations(array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      setTimeout(() => {\n        const [barOneIdx, newHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        barOneStyle.height = `${newHeight}px`;\n      }, i * 20);\n    }\n  }\n\n  function quickSort() {\n    const animations = getQuickSortAnimations(array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      setTimeout(() => {\n        const [barOneIdx, barTwoIdx, newHeight1, newHeight2] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        barOneStyle.height = `${newHeight1}px`;\n        barTwoStyle.height = `${newHeight2}px`;\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\n        barTwoStyle.backgroundColor = 'purple';\n        setTimeout(() => {\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n        }, 60);\n      }, i * 60);\n    }\n  }\n\n  function heapSort() {\n    const animations = getHeapSortAnimations(array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      setTimeout(() => {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        let temp = barOneStyle.height;\n        barOneStyle.height = barTwoStyle.height;\n        barTwoStyle.height = temp;\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\n        barTwoStyle.backgroundColor = 'PURPLE';\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, ANIMATION_SPEED_MS);\n      }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  function bubbleSort() {\n    const animations = getBubbleSortAnimations(array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      setTimeout(() => {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        let temp = barOneStyle.height;\n        barOneStyle.height = barTwoStyle.height;\n        barTwoStyle.height = temp;\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        setTimeout(() => (barTwoStyle.backgroundColor = PRIMARY_COLOR), 5);\n      }, i * 5);\n    }\n  }\n\n  function onChange(e) {\n    const newVal = e.target.value;\n    setSpeed(newVal);\n  }\n  function onChange2(e) {\n    const newVal = e.target.value;\n    setBars(newVal);\n  }\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <div className=\"btn-container\">\n          <button onClick={!running ? () => resetArray() : null}>\n            Generate New Array\n          </button>\n          <button onClick={!running ? () => mergeSort() : null}>\n            Merge Sort\n          </button>\n          <button onClick={!running ? () => quickSort() : null}>\n            Quick Sort\n          </button>\n          <button onClick={!running ? () => heapSort() : null}>\n            Heap Sort\n          </button>\n          <button onClick={!running ? () => bubbleSort() : null}>\n            Bubble Sort\n          </button>\n        </div>\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}></div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n\n  function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n}\n\nexport default SortingVisualizer;\n","export default function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  quicksort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quicksort(array, animations) {\r\n  function swap(items, firstIndex, secondIndex) {\r\n    var temp = items[firstIndex];\r\n    items[firstIndex] = items[secondIndex];\r\n    items[secondIndex] = temp;\r\n  }\r\n\r\n  function partition(items, left, right) {\r\n    var pivot = items[left];\r\n    var i = left - 1;\r\n    var j = right + 1;\r\n\r\n    while (i < j) {\r\n      i++;\r\n      j--;\r\n\r\n      while (items[i] < pivot) {\r\n        i++;\r\n      }\r\n\r\n      while (items[j] > pivot) {\r\n        j--;\r\n      }\r\n\r\n      if (i < j) {\r\n        swap(items, i, j);\r\n        animations.push([i, j, items[i], items[j]]);\r\n      }\r\n    }\r\n    return j;\r\n  }\r\n\r\n  function quickSortAlgo(items, left, right) {\r\n    var index;\r\n\r\n    if (right > left) {\r\n      index = partition(items, left, right);\r\n      quickSortAlgo(items, left, index);\r\n      quickSortAlgo(items, index + 1, right);\r\n    }\r\n    return items;\r\n  }\r\n  quickSortAlgo(array, 0, array.length - 1, animations);\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.js';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <StoreProvider> */}\n    <App />\n    {/* </StoreProvider> */}\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}